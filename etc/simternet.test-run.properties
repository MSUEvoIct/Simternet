#### 
# Simternet (domain model) specific configuration
####
eval.model = simternet.Simternet
eval.model.steps = 100
eval.model.landscapeSizeX = 2
eval.model.landscapeSizeY = 2
eval.model.interestRate = 0.01
eval.model.depreciationRate = 0.01
eval.model.payoffRate = 0.01
eval.model.nspEndowment = 1000
eval.model.edgeBuildCostFixed = 1
eval.model.edgeBuildCostPerUser = 0.0001
eval.model.edgeOpCostFixed = 0.0001
eval.model.edgeOpCostPerUser = 0.0000000001
eval.model.edgeInitialBandwidth = 1E9
eval.model.aspEndowment = 10000
eval.model.qtyToBandwidthExponent = 0.5
eval.model.congestionAdjustmentSpeed = 0.1
eval.model.applicationFlowGrowthProportion = 0.1

eval.model.qualityPrice = 1

eval.model.qualityExponent = 0.5
eval.model.preferenceExponent = 0.5

eval.model.wtpExponent = 0.5

eval.model.populationInitializer = simternet.consumer.FlatPopulationInitializer
eval.model.populationInitializer.popSize = 100
eval.model.appBudget = 50




#####
# Agency/ECJ Configuration
#####
generations = 100

#current-job = 5
#jobs = 6
breedthreads	= 8
evalthreads	= 8
seed.0		= 4357
seed.1		= 4358
seed.2		= 4359
seed.3		= 4360
seed.4		= 10846395
seed.5		= 1239856
seed.6		= 346789
seed.7		= 1154390


state		= ec.simple.SimpleEvolutionState
pop			= ec.Population
init		= ec.simple.SimpleInitializer
finish		= ec.simple.SimpleFinisher
breed		= ec.agency.AgencyBreeder

breed.tournamentSize = 2
breed.numSubpopGroups = 3
# ASP
breed.numSubpopGroups.0.size = 100
# NSP
breed.numSubpopGroups.1.size = 100
# Consumer
breed.numSubpopGroups.2.size = 50

breed.changeWeight = 0.2


# Output stats to console
stat		= ec.agency.stats.SummaryStatsFitness
stat.file		= $out.stat
stat.num-children = 2
stat.child.0 = ec.agency.stats.GenomeDump
stat.child.1 = ec.agency.stats.PopulationSizes
#stat.child.1 = ec.agency.stats.SummaryStatsVectorIndividual
# Currently broken
#stat.child.0 = ec.agency.IntergenerationalStatistics
#stat.child.0.popCheckpointPrefix = out/ixg
#stat.child.0.modulo = 20
#stat.child.0.num-lags = 3
#stat.child.0.lag.0 = 5
#stat.child.0.lag.1 = 10
#stat.child.0.lag.2 = 40

exch		= ec.simple.SimpleExchanger

# This is a generic evaluator that should work with all simulations
eval		= ec.agency.eval.AgencyEvaluator

eval.fitnessaggregator = ec.agency.eval.ArithmaticMeanFitnessAggregator

# This is the class responsible for taking the ECJ population
#  and creating groups of agents to be evaluated together.
eval.groupcreator = ec.agency.eval.PerSubpopGroupCreator

# subpop groups
# 0 -> ASPs
# 1 -> NSPs
# 2 -> Consuemrs


# How many individuals will be placed in the simulation together?
eval.groupcreator.groupSize.0 = 20
eval.groupcreator.groupSize.1 = 5
eval.groupcreator.groupSize.2 = 20

# How many times we should go through the population?
eval.groupcreator.rounds.0 = 10
eval.groupcreator.rounds.1 = 10
eval.groupcreator.rounds.2 = 10


# The simulations must not have any dependencies on each other,
#  but the benefit is that they can be run simultaneously
#  when it is desirable to speed up a single evolutionary run.
#  E.g., for intermediate/debugging runs, where HPCC resource
#  scheduling is not a concern.
# A single-threaded version of this might be more appropriate for
#  batch HPCC runs.
#eval.simrunner = abce.agency.ec.ecj.ThreadPoolRunner
#eval.simrunner.threads = 4
# Rather than using ECJ-thread seeds, the evaluator will assign
#  seeds to simulations based on this starting seed.
#eval.runner = ec.agency.eval.LoopRunner
eval.runner = ec.agency.eval.ThreadPoolRunner


# eval.problem is no longer used in this way; it has been replaced
# by the AgencyEvaluator system.
#XXXXXXNOTUSED
eval.problem		= abce.models.io.iterated.cournot.IteratedCournotProblem
#XXXXXXNOTUSED


quit-on-run-complete	= true
checkpoint		= true
prefix			= data/checkpoints/ecj/generation
checkpoint-modulo	= 100


pop.subpops		= 3

# Population Configuration
pop.subpop.0		= ec.agency.SimpleScalableSubpopulation
pop.subpop.0.subpopGroup = 2
pop.subpop.0.minIndividuals = 10
pop.subpop.0.size 		= 50
pop.subpop.0.duplicate-retries 	= 10
# Charactaristics of the Species' genome/representation
pop.subpop.0.species 		= ec.vector.FloatVectorSpecies
pop.subpop.0.species.min-gene = 0
pop.subpop.0.species.max-gene = 100
pop.subpop.0.species.mutation-type = gauss
pop.subpop.0.species.mutation-stdev = 5
pop.subpop.0.species.out-of-bounds-retries = 20
pop.subpop.0.species.genome-size = 3
pop.subpop.0.species.crossover-type = one
pop.subpop.0.species.mutation-prob = 0.04
# Doesn't use genome; strictly for testing purposes
pop.subpop.0.species.ind	= simternet.consumer.RationalConsumer
# How the fitness is evaluated
pop.subpop.0.species.fitness 	= ec.simple.SimpleFitness
# The EA pipeline for new NSP individuals.
# Parameters taken from koza.params
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.generate-max = false
# Subsidiary pipelines:
pop.subpop.0.species.pipe.num-sources = 3
pop.subpop.0.species.pipe.source.0 = ec.vector.breed.VectorCrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.2
pop.subpop.0.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.3
pop.subpop.0.species.pipe.source.1.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.2 = ec.vector.breed.VectorMutationPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.5
pop.subpop.0.species.pipe.source.2.source.0 = ec.select.TournamentSelection




# Population Configuration
pop.subpop.1		= ec.agency.SimpleScalableSubpopulation
pop.subpop.1.subpopGroup = 0
pop.subpop.1.minIndividuals = 10
pop.subpop.1.size 		= 100
pop.subpop.1.duplicate-retries 	= 10

# Charactaristics of the Species' genome/representation
pop.subpop.1.species 		= ec.vector.FloatVectorSpecies
pop.subpop.1.species.min-gene = 0
pop.subpop.1.species.max-gene = 10
pop.subpop.1.species.mutation-type = gauss
pop.subpop.1.species.mutation-stdev = 1
pop.subpop.1.species.out-of-bounds-retries = 20
pop.subpop.1.species.genome-size = 2
pop.subpop.1.species.num-segments = 2
pop.subpop.1.species.segment-type = start
pop.subpop.1.species.segment.0.start = 0
pop.subpop.1.species.segment.0.min-gene = 0
pop.subpop.1.species.segment.0.max-gene = 10
pop.subpop.1.species.segment.0.mutation-stdev = 1
pop.subpop.1.species.segment.1.start = 1
pop.subpop.1.species.segment.1.min-gene = 0
pop.subpop.1.species.segment.1.max-gene = 500
pop.subpop.1.species.segment.1.mutation-stdev = 20



pop.subpop.1.species.crossover-type = one
pop.subpop.1.species.mutation-prob = 0.2
# Doesn't use genome; strictly for testing purposes
pop.subpop.1.species.ind	= simternet.asp.DirectASPIndividual

# How the fitness is evaluated
pop.subpop.1.species.fitness 	= ec.simple.SimpleFitness

# The EA pipeline for new ASP individuals.
# Parameters taken from koza.params
pop.subpop.1.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.1.species.pipe.generate-max = false
# Subsidiary pipelines:
pop.subpop.1.species.pipe.num-sources = 3
pop.subpop.1.species.pipe.source.0 = ec.vector.breed.VectorCrossoverPipeline
pop.subpop.1.species.pipe.source.0.prob = 0.2
pop.subpop.1.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.1.species.pipe.source.0.source.1 = ec.select.TournamentSelection
pop.subpop.1.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.1.species.pipe.source.1.prob = 0.3
pop.subpop.1.species.pipe.source.1.source.0 = ec.select.TournamentSelection
pop.subpop.1.species.pipe.source.2 = ec.vector.breed.VectorMutationPipeline
pop.subpop.1.species.pipe.source.2.prob = 0.5
pop.subpop.1.species.pipe.source.2.source.0 = ec.select.TournamentSelection








# Population Configuration
pop.subpop.2		= ec.agency.SimpleScalableSubpopulation
pop.subpop.2.subpopGroup = 1
pop.subpop.2.minIndividuals = 10
pop.subpop.2.size 		= 100
pop.subpop.2.duplicate-retries 	= 10
# Charactaristics of the Species' genome/representation
pop.subpop.2.species 		= ec.vector.FloatVectorSpecies
pop.subpop.2.species.min-gene = 0
pop.subpop.2.species.max-gene = 100
pop.subpop.2.species.mutation-type = gauss
pop.subpop.2.species.mutation-stdev = 5
pop.subpop.2.species.out-of-bounds-retries = 20
pop.subpop.2.species.genome-size = 6
pop.subpop.2.species.crossover-type = one
pop.subpop.2.species.mutation-prob = 0.04
pop.subpop.2.species.num-segments = 4
pop.subpop.2.species.segment-type = start
pop.subpop.2.species.segment.0.start = 0
pop.subpop.2.species.segment.0.min-gene = -1
pop.subpop.2.species.segment.0.max-gene = 1
pop.subpop.2.species.segment.0.mutation-stdev = 0.1
pop.subpop.2.species.segment.1.start = 2
pop.subpop.2.species.segment.1.min-gene = 0
pop.subpop.2.species.segment.1.max-gene = 100
pop.subpop.2.species.segment.1.mutation-stdev = 10
pop.subpop.2.species.segment.2.start = 3
pop.subpop.2.species.segment.2.min-gene = -20
pop.subpop.2.species.segment.2.max-gene = 20
pop.subpop.2.species.segment.2.mutation-stdev = 4
pop.subpop.2.species.segment.3.start = 4
pop.subpop.2.species.segment.3.min-gene = -1
pop.subpop.2.species.segment.3.max-gene = 1
pop.subpop.2.species.segment.3.mutation-stdev = 0.1




# Doesn't use genome; strictly for testing purposes
pop.subpop.2.species.ind	= simternet.nsp.SimpleNSPIndividual
# How the fitness is evaluated
pop.subpop.2.species.fitness 	= ec.simple.SimpleFitness
# The EA pipeline for new NSP individuals.
# Parameters taken from koza.params
pop.subpop.2.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.2.species.pipe.generate-max = false
# Subsidiary pipelines:
pop.subpop.2.species.pipe.num-sources = 3
pop.subpop.2.species.pipe.source.0 = ec.vector.breed.VectorCrossoverPipeline
pop.subpop.2.species.pipe.source.0.prob = 0.2
pop.subpop.2.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.2.species.pipe.source.0.source.1 = ec.select.TournamentSelection
pop.subpop.2.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.2.species.pipe.source.1.prob = 0.3
pop.subpop.2.species.pipe.source.1.source.0 = ec.select.TournamentSelection
pop.subpop.2.species.pipe.source.2 = ec.vector.breed.VectorMutationPipeline
pop.subpop.2.species.pipe.source.2.prob = 0.5
pop.subpop.2.species.pipe.source.2.source.0 = ec.select.TournamentSelection


select.tournament.size = 2



