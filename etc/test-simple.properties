################################################################################
# Example/Template Simternet Configuration File                                #
################################################################################
#
# This file is used to specify the high-level parameters of the ECJ setup that
# runs the Simternet model, and the population of individuals/agents that will
# populate that model.  The domain model specific configuration is not included
# here, but references in the file below.


##################################
# Basic, Top-Level Configuration #
##################################
 
# Use this file for random seeds
parent.0 = RandomSeeds.properties

# Use this file for parameters used by the domain model.
parent.1 = DomainModel.properties
parent.2 = Basic.properties

# Run for this many generations before quitting
generations = 100


#current-job = 5
#jobs = 6
breedthreads	= 24
evalthreads	= 24

############################################
# Configuration of the Breeding for Agency #
############################################
# 
# Parameters that do not relate to the specific population configuration are
# contained in Basic.properties instead.  Th

## Specify the subpopulation groups the total number of individuals in each.
# ASPs -> 0
# NSPs -> 1
# Consumers -> 2
breed.numSubpopGroups = 3
breed.numSubpopGroups.0.size = 100
breed.numSubpopGroups.1.size = 100
breed.numSubpopGroups.2.size = 100

# Use the group creator that allows different numbers of individuals
# to be selected from each subpopulation group
eval.groupcreator = ec.agency.eval.PerSubpopGroupCreator

# How many individuals will be placed in the simulation together?
eval.groupcreator.groupSize.0 = 40
eval.groupcreator.groupSize.1 = 2
eval.groupcreator.groupSize.2 = 20

# How many times we should go through the population?
eval.groupcreator.rounds.0 = 3
eval.groupcreator.rounds.1 = 3
eval.groupcreator.rounds.2 = 3


#####################################
# Specific Population Configuration #
#####################################

# There are exactly 3 subpopulations in this test
pop.subpops		= 3

##################################################
# Configuration for Consumers (RationalConsumer) #
##################################################

# This is a consumer agent and plays that role.  See config above.
pop.subpop.0.subpopGroup = 2

# Basic information about the classes that support this individual
pop.subpop.0 = ec.agency.SimpleScalableSubpopulation
pop.subpop.0.species = ec.agency.NullSpecies
pop.subpop.0.species.ind	= simternet.consumer.RationalConsumer
pop.subpop.0.species.fitness 	= ec.simple.SimpleFitness

# Start out with, and limit the minimim size of this population
pop.subpop.0.size = 100
pop.subpop.0.minIndividuals = 10

# Specify the breeding pipeline for this population.  Since it has no
# genome, simple reproduction is sufficient.
pop.subpop.0.duplicate-retries 	= 2
pop.subpop.0.species.pipe = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.generate-max = false
pop.subpop.0.species.pipe.source.0 = ec.select.TournamentSelection


##################################################
# Configuration for ASPs (DirectASP)             #
##################################################


# This is an ASP agent and plays that role.  See config above.
pop.subpop.1.subpopGroup = 0

# Basic information about the classes that support this individual
pop.subpop.1		= ec.agency.SimpleScalableSubpopulation
pop.subpop.1.species 		= ec.vector.FloatVectorSpecies
pop.subpop.1.species.ind	= simternet.asp.DirectASPIndividual
pop.subpop.1.species.fitness 	= ec.simple.SimpleFitness

# Start out with, and limit the minimim size of this population
pop.subpop.1.size 		= 100
pop.subpop.1.minIndividuals = 10


# This section specifies the allowed ranges and variation for
# these individuals' genomes.  How these are turned into actions
# is controlled by the code in the individual
pop.subpop.1.species.genome-size = 2
pop.subpop.1.species.num-segments = 2
pop.subpop.1.species.min-gene = 0
pop.subpop.1.species.max-gene = 10
pop.subpop.1.species.mutation-type = gauss
pop.subpop.1.species.mutation-stdev = 1
pop.subpop.1.species.out-of-bounds-retries = 20
pop.subpop.1.species.segment-type = start
pop.subpop.1.species.segment.0.start = 0
pop.subpop.1.species.segment.0.min-gene = 0
pop.subpop.1.species.segment.0.max-gene = 15
pop.subpop.1.species.segment.0.mutation-stdev = 0.5
pop.subpop.1.species.segment.1.start = 1
pop.subpop.1.species.segment.1.min-gene = 0
pop.subpop.1.species.segment.1.max-gene = 50
pop.subpop.1.species.segment.1.mutation-stdev = 10

# Specify the breeding pipeline for this population
pop.subpop.1.species.crossover-type = one
pop.subpop.1.species.mutation-prob = 0.2

# The EA pipeline for new ASP individuals.
pop.subpop.1.duplicate-retries 	= 2
pop.subpop.1.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.1.species.pipe.generate-max = false
pop.subpop.1.species.pipe.num-sources = 3
pop.subpop.1.species.pipe.source.0 = ec.vector.breed.VectorCrossoverPipeline
pop.subpop.1.species.pipe.source.0.prob = 0.2
pop.subpop.1.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.1.species.pipe.source.0.source.1 = ec.select.TournamentSelection
pop.subpop.1.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.1.species.pipe.source.1.prob = 0.3
pop.subpop.1.species.pipe.source.1.source.0 = ec.select.TournamentSelection
pop.subpop.1.species.pipe.source.2 = ec.vector.breed.VectorMutationPipeline
pop.subpop.1.species.pipe.source.2.prob = 0.5
pop.subpop.1.species.pipe.source.2.source.0 = ec.select.TournamentSelection




##################################################
# Configuration for NSPs (TrivialNSP)            #
##################################################

# This is an ASP agent and plays that role.  See config above.
pop.subpop.2.subpopGroup = 1

# Basic information about the classes that support this individual
pop.subpop.2		= ec.agency.SimpleScalableSubpopulation
pop.subpop.2.species 		= ec.vector.FloatVectorSpecies
pop.subpop.2.species.ind	= simternet.nsp.TrivialNSPIndividual
pop.subpop.2.species.fitness 	= ec.simple.SimpleFitness


# Start out with, and limit the minimim size of this population
pop.subpop.2.minIndividuals = 10
pop.subpop.2.size 		= 100


# This section specifies the allowed ranges and variation for
# these individuals' genomes.  How these are turned into actions
# is controlled by the code in the individual
pop.subpop.2.species.min-gene = 0
pop.subpop.2.species.max-gene = 100
pop.subpop.2.species.mutation-type = gauss
pop.subpop.2.species.mutation-stdev = 5
pop.subpop.2.species.out-of-bounds-retries = 20
pop.subpop.2.species.genome-size = 6
pop.subpop.2.species.crossover-type = one
pop.subpop.2.species.mutation-prob = 0.1
pop.subpop.2.species.num-segments = 2
pop.subpop.2.species.segment-type = start
pop.subpop.2.species.segment.0.start = 0
pop.subpop.2.species.segment.0.min-gene = 0
pop.subpop.2.species.segment.0.max-gene = 0.1
pop.subpop.2.species.segment.0.mutation-stdev = 0.01
pop.subpop.2.species.segment.1.start = 1
pop.subpop.2.species.segment.1.min-gene = 0
pop.subpop.2.species.segment.1.max-gene = 70
pop.subpop.2.species.segment.1.mutation-stdev = 20


# The EA pipeline for new ASP individuals.
pop.subpop.2.duplicate-retries 	= 2
pop.subpop.2.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.2.species.pipe.generate-max = false
pop.subpop.2.species.pipe.num-sources = 3
pop.subpop.2.species.pipe.source.0 = ec.vector.breed.VectorCrossoverPipeline
pop.subpop.2.species.pipe.source.0.prob = 0.2
pop.subpop.2.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.2.species.pipe.source.0.source.1 = ec.select.TournamentSelection
pop.subpop.2.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.2.species.pipe.source.1.prob = 0.3
pop.subpop.2.species.pipe.source.1.source.0 = ec.select.TournamentSelection
pop.subpop.2.species.pipe.source.2 = ec.vector.breed.VectorMutationPipeline
pop.subpop.2.species.pipe.source.2.prob = 0.5
pop.subpop.2.species.pipe.source.2.source.0 = ec.select.TournamentSelection




